"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service which subscriptions will be published to when this mutation is
called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

enum ActivityType {
  APPROVE
  CANCEL
  CLAIM
  SEND
  RECEIVE
  SWAP
  DEPLOYMENT
  UNKNOWN
  money
  market
  LEND
  BORROW
  REPAY
  WITHDRAW
  NFT
  MINT
  BURN
  Staking
  STAKE
  UNSTAKE
}

type Amount implements IAmount {
  id: ID!
  currency: Currency
  value: Float!
}

type AmountChange {
  id: ID!
  percentage: Amount
  absolute: Amount
}

type AssetActivity {
  id: ID!
  timestamp: Int!
  type: ActivityType!
  chain: Chain!
  gasUsed: Float
  transaction: Transaction!
  assetChanges: [AssetChange]!
}

union AssetChange = TokenTransfer | NftTransfer | TokenApproval | NftApproval | NftApproveForAll

"""
The `AWSJSON` scalar type provided by AWS AppSync, represents a JSON string that
complies with [RFC 8259](https://tools.ietf.org/html/rfc8259).  Maps like
"**{\\"upvotes\\": 10}**", lists like "**[1,2,3]**", and scalar values like
"**\\"AWSJSON example string\\"**", "**1**", and "**true**" are accepted as
valid JSON and will automatically be parsed and loaded in the resolver mapping
templates as Maps, Lists, or Scalar values rather than as the literal input
strings.  Invalid JSON strings like "**{a: 1}**", "**{'a': 1}**" and "**Unquoted
string**" will throw GraphQL validation errors.
"""
scalar AWSJSON

enum Chain {
  ARBITRUM
  ETHEREUM
  ETHEREUM_GOERLI
  OPTIMISM
  POLYGON
  CELO
  UNKNOWN_CHAIN
}

input ContractInput {
  chain: Chain!
  address: String
}

enum Currency {
  USD
  ETH
}

type Dimensions {
  id: ID!
  height: Float
  width: Float
}

enum HighLow {
  HIGH
  LOW
}

enum HistoryDuration {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
  MAX
}

interface IAmount {
  currency: Currency
  value: Float!
}

interface IContract {
  chain: Chain!
  address: String
}

type Image {
  id: ID!
  url: String!
  dimensions: Dimensions
}

"""  TODO: deprecate this enum"""
enum MarketSortableField {
  MARKET_CAP
  VOLUME
}

type NftActivity {
  id: ID!
  address: String!
  tokenId: String
  asset: NftAsset
  type: NftActivityType!
  marketplace: NftMarketplace
  fromAddress: String!
  toAddress: String
  transactionHash: String
  price: Amount
  quantity: Int
  orderStatus: OrderStatus
  url: String
  timestamp: Int!
}

type NftActivityConnection {
  pageInfo: PageInfo!
  edges: [NftActivityEdge!]!
}

type NftActivityEdge {
  cursor: String!
  node: NftActivity!
}

input NftActivityFilterInput {
  address: String
  tokenId: String
  activityTypes: [NftActivityType!]
}

enum NftActivityType {
  LISTING
  SALE
  CANCEL_LISTING
  TRANSFER
}

type NftApproval {
  id: ID!
  nftStandard: NftStandard!

  """  can be erc20 or erc1155"""
  asset: NftAsset!
  approvedAddress: String!
}

type NftApproveForAll {
  id: ID!
  nftStandard: NftStandard!

  """  can be erc721 or erc1155"""
  asset: NftAsset!
  operatorAddress: String!
  approved: Boolean!
}

type NftAsset {
  id: ID!
  collection: NftCollection
  description: String
  imageUrl: String
  thumbnailUrl: String
  animationUrl: String
  smallImageUrl: String
  image: Image
  thumbnail: Image
  smallImage: Image
  originalImage: Image
  name: String
  nftContract: NftContract

  """  TODO: may need to be array to support erc1155 cases. not needed at the moment so will revisit.
  """
  ownerAddress: String
  tokenId: String!
  traits: [NftAssetTrait!]
  rarities: [NftAssetRarity!]
  listings(asc: Boolean, first: Int, last: Int, after: String, before: String): NftOrderConnection
  suspiciousFlag: Boolean
  flaggedBy: String
  metadataUrl: String
  creator: NftProfile
}

type NftAssetConnection {
  pageInfo: PageInfo!
  edges: [NftAssetEdge!]!
  totalCount: Int
}

type NftAssetEdge {
  cursor: String!
  node: NftAsset!
}

input NftAssetInput {
  address: String!
  tokenId: String!
}

type NftAssetRarity {
  id: ID!
  score: Float
  rank: Int
  provider: NftRarityProvider
}

input NftAssetsFilterInput {
  tokenSearchQuery: String
  tokenIds: [String!]
  traits: [NftAssetTraitInput!]
  listed: Boolean
  minPrice: String
  maxPrice: String
  marketplaces: [NftMarketplace!]
}

enum NftAssetSortableField {
  PRICE
  RARITY
}

type NftAssetTrait {
  id: ID!
  name: String
  rarity: Float
  value: String
}

input NftAssetTraitInput {
  name: String!
  values: [String!]!
}

type NftBalance {
  id: ID!
  ownedAsset: NftAsset
  listedMarketplaces: [NftMarketplace!]
  lastPrice: TimestampedAmount
  listingFees: [NftFee]
}

type NftBalanceConnection {
  pageInfo: PageInfo!
  edges: [NftBalanceEdge!]!
}

type NftBalanceEdge {
  cursor: String!
  node: NftBalance!
}

input NftBalancesFilterInput {
  addresses: [String!]
  assets: [NftAssetInput!]
}

type NftCollection {
  id: ID!
  collectionId: String!

  """
    TODO: support querying for collection assets here
   assets(page: Int, pageSize: Int, orderBy: NftAssetSortableField): [NftAsset]
  """
  bannerImageUrl: String
  bannerImage: Image
  description: String
  discordUrl: String
  homepageUrl: String
  imageUrl: String
  image: Image
  instagramName: String
  markets(currencies: [Currency!]!): [NftCollectionMarket!]
  name: String
  nftContracts: [NftContract!]
  openseaUrl: String
  traits: [NftCollectionTrait!]
  twitterName: String
  isVerified: Boolean
  numAssets: Int
  creator: NftProfile
}

type NftCollectionConnection {
  pageInfo: PageInfo!
  edges: [NftCollectionEdge!]!
}

type NftCollectionEdge {
  cursor: String!
  node: NftCollection!
}

type NftCollectionMarket {
  id: ID!
  nftContracts: [NftContract!]
  floorPrice: TimestampedAmount
  owners: Int
  volume24h: Amount
  totalVolume: TimestampedAmount
  volume(duration: HistoryDuration): TimestampedAmount
  volumePercentChange(duration: HistoryDuration): TimestampedAmount
  floorPricePercentChange(duration: HistoryDuration): TimestampedAmount
  sales(duration: HistoryDuration): TimestampedAmount
  listings: TimestampedAmount
  marketplaces(marketplaces: [NftMarketplace!]): [NftCollectionMarketplace!]
}

type NftCollectionMarketplace {
  id: ID!
  marketplace: NftMarketplace
  listings: Int
  floorPrice: Float
}

input NftCollectionsFilterInput {
  addresses: [String!]
  nameQuery: String
}

type NftCollectionTrait {
  id: ID!
  name: String
  values: [String!]
  stats: [NftCollectionTraitStats!]
}

type NftCollectionTraitStats {
  id: ID!
  name: String
  value: String
  assets: Int
  listings: Int
}

type NftContract implements IContract {
  id: ID!
  address: String!
  chain: Chain!
  name: String
  standard: NftStandard
  symbol: String
  totalSupply: Int
}

type NftFee {
  id: ID!
  payoutAddress: String!
  basisPoints: Int!
}

enum NftMarketplace {
  OPENSEA
  LOOKSRARE
  X2Y2
  SUDOSWAP
  NFTX
  NFT20
  FOUNDATION
  CRYPTOPUNKS
}

enum NftMarketSortableField {
  VOLUME
  FLOOR_PRICE
}

type NftOrder {
  id: ID!
  address: String!
  tokenId: String
  type: OrderType!
  marketplace: NftMarketplace!
  marketplaceUrl: String!
  price: Amount!
  quantity: Int!
  orderHash: String
  status: OrderStatus!
  createdAt: Float!
  startAt: Float!
  endAt: Float
  maker: String!
  taker: String
  auctionType: String
  protocolParameters: AWSJSON
}

type NftOrderConnection {
  pageInfo: PageInfo!
  edges: [NftOrderEdge!]!
}

type NftOrderEdge {
  cursor: String!
  node: NftOrder!
}

type NftProfile {
  id: ID!
  address: String!
  isVerified: Boolean
  profileImage: Image
  username: String
}

enum NftRarityProvider {
  RARITY_SNIPER
}

type NftRouteResponse {
  id: ID!
  calldata: String!
  toAddress: String!
  sendAmount: TokenAmount!
  route: [NftTrade!]
}

enum NftStandard {
  ERC721
  ERC1155
  NONCOMPLIANT
}

type NftTrade {
  id: ID!
  contractAddress: String!
  tokenId: String!
  tokenType: NftStandard!
  marketplace: NftMarketplace!
  amount: Int!

  """  quotePrice represents the last quoted price of the NFT"""
  quotePrice: TokenAmount

  """  price represents the current price of the NFT, which can be different from quotePrice
  """
  price: TokenAmount!
}

input NftTradeInput {
  id: ID!
  contractAddress: String!
  tokenId: String!
  tokenType: NftStandard!
  marketplace: NftMarketplace!
  amount: Int!
  quotePrice: TokenAmountInput
}

type NftTransfer {
  id: ID!
  nftStandard: NftStandard!
  asset: NftAsset!
  sender: String!
  recipient: String!
  direction: TransactionDirection!
}

enum OrderStatus {
  VALID
  EXECUTED
  CANCELLED
  EXPIRED
}

enum OrderType {
  LISTING
  OFFER
}

type PageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  startCursor: String
  endCursor: String
}

"""  v2 pool parameters as defined by https://github.com/Uniswap/v2-sdk/blob/main/src/entities/pair.ts
"""
input PairInput {
  tokenAmountA: TokenAmountInput!
  tokenAmountB: TokenAmountInput!
}

input PermitDetailsInput {
  token: String!
  amount: String!
  expiration: String!
  nonce: String!
}

input PermitInput {
  signature: String!
  details: PermitDetailsInput!
  spender: String!
  sigDeadline: String!
}

"""  v3 pool parameters as defined by https://github.com/Uniswap/v3-sdk/blob/main/src/entities/pool.ts
"""
input PoolInput {
  tokenA: TokenInput!
  tokenB: TokenInput!
  fee: Int!
  sqrtRatioX96: String!
  liquidity: String!
  tickCurrent: String!
}

type Portfolio {
  id: ID!
  ownerAddress: String!
  tokensTotalDenominatedValue: Amount
  tokensTotalDenominatedValueChange(duration: HistoryDuration): AmountChange
  tokenBalances: [TokenBalance]

  """  TODO: (michael.zhang) replace with paginated query"""
  nftBalances: [NftBalance]
  assetActivities(page: Int, pageSize: Int, includeOffChain: Boolean): [AssetActivity]
}

type Query {
  tokens(contracts: [ContractInput!]!): [Token]
  token(chain: Chain!, address: String): Token
  tokenProjects(contracts: [ContractInput!]!): [TokenProject]
  searchTokens(searchQuery: String!): [Token]
  searchTokenProjects(searchQuery: String!): [TokenProject]
  portfolios(ownerAddresses: [String!]!): [Portfolio]
  nftCollectionsById(collectionIds: [String]): [NftCollection]
  topTokens(chain: Chain, page: Int, pageSize: Int, orderBy: TokenSortableField): [Token]
  nftAssets(chain: Chain, address: String!, orderBy: NftAssetSortableField, asc: Boolean, filter: NftAssetsFilterInput, first: Int, last: Int, after: String, before: String): NftAssetConnection
  nftCollections(chain: Chain, filter: NftCollectionsFilterInput, cursor: String, limit: Int): NftCollectionConnection
  nftBalances(chain: Chain, ownerAddress: String!, filter: NftBalancesFilterInput, first: Int, last: Int, after: String, before: String, cursor: String, limit: Int): NftBalanceConnection
  nftRoute(chain: Chain, senderAddress: String!, nftTrades: [NftTradeInput!]!, tokenTrades: [TokenTradeInput!]): NftRouteResponse
  nftActivity(chain: Chain, filter: NftActivityFilterInput, cursor: String, limit: Int): NftActivityConnection
}

enum SafetyLevel {
  VERIFIED
  MEDIUM_WARNING
  STRONG_WARNING
  BLOCKED
}

type TimestampedAmount implements IAmount {
  id: ID!
  currency: Currency
  value: Float!
  timestamp: Int!
}

type Token implements IContract {
  id: ID!
  chain: Chain!
  address: String
  standard: TokenStandard
  decimals: Int
  name: String
  symbol: String
  project: TokenProject
  market(currency: Currency): TokenMarket
}

type TokenAmount {
  id: ID!
  value: String!
  currency: Currency!
}

input TokenAmountInput {
  token: TokenInput!
  amount: String!
}

type TokenApproval {
  id: ID!
  tokenStandard: TokenStandard!

  """  can be erc20 or erc1155"""
  asset: Token!
  approvedAddress: String!
  quantity: String!
}

type TokenBalance {
  id: ID!
  blockNumber: Int
  blockTimestamp: Int
  quantity: Float
  denominatedValue: Amount
  ownerAddress: String!
  token: Token
  tokenProjectMarket: TokenProjectMarket
}

input TokenInput {
  chainId: Int!
  address: String!
  decimals: Int!
  isNative: Boolean!
}

type TokenMarket {
  id: ID!
  token: Token!
  price: Amount
  totalValueLocked: Amount
  volume(duration: HistoryDuration!): Amount
  pricePercentChange(duration: HistoryDuration!): Amount
  priceHistory(duration: HistoryDuration!): [TimestampedAmount]
  priceHighLow(duration: HistoryDuration!, highLow: HighLow!): Amount
}

type TokenProject {
  id: ID!
  name: String
  tokens: [Token!]!
  description: String
  twitterName: String
  homepageUrl: String
  logoUrl: String
  logo: Image
  smallLogo: Image
  isSpam: Boolean
  spamCode: Int
  safetyLevel: SafetyLevel
  markets(currencies: [Currency!]!): [TokenProjectMarket]
}

type TokenProjectMarket {
  id: ID!
  tokenProject: TokenProject!
  currency: Currency!
  price: Amount
  volume24h: Amount @deprecated(reason: "Use TokenMarket.volume with duration DAY for Uniswap volume")
  pricePercentChange24h: Amount @deprecated(reason: "Use pricePercentChange")
  marketCap: Amount
  fullyDilutedMarketCap: Amount @deprecated(reason: "Use marketCap")
  priceHistory(duration: HistoryDuration!): [TimestampedAmount]
  volume(duration: HistoryDuration!): Amount @deprecated(reason: "Use TokenMarket.volume for Uniswap volume")
  pricePercentChange(duration: HistoryDuration!): Amount
  priceHighLow(duration: HistoryDuration!, highLow: HighLow!): Amount
}

enum TokenSortableField {
  TOTAL_VALUE_LOCKED
  MARKET_CAP
  VOLUME
  POPULARITY
}

enum TokenStandard {
  NATIVE
  ERC20
  ERC1155
}

input TokenTradeInput {
  tokenAmount: TokenAmountInput!
  routes: TokenTradeRoutesInput
  slippageToleranceBasisPoints: Int
  permit: PermitInput
}

input TokenTradeRouteInput {
  pools: [TradePoolInput!]!
  inputAmount: TokenAmountInput!
  outputAmount: TokenAmountInput!
}

input TokenTradeRoutesInput {
  v2Routes: [TokenTradeRouteInput!]
  v3Routes: [TokenTradeRouteInput!]
  mixedRoutes: [TokenTradeRouteInput!]
  tradeType: TokenTradeType!
}

enum TokenTradeType {
  EXACT_INPUT
  EXACT_OUTPUT
}

type TokenTransfer {
  id: ID!
  tokenStandard: TokenStandard!
  asset: Token!
  sender: String!
  recipient: String!
  quantity: String!
  direction: TransactionDirection!
  transactedValue: Amount
}

input TradePoolInput {
  pair: PairInput
  pool: PoolInput
}

type Transaction {
  id: ID!
  blockNumber: Int!
  from: String!
  to: String!
  hash: String!
  nonce: Int!
  gasLimit: Float
  maxFeePerGas: Float
  status: TransactionStatus!
}

enum TransactionDirection {
  IN
  OUT
  SELF
}

enum TransactionStatus {
  FAILED
  CONFIRMED
  PENDING
}

