query Nfts($ownerAddress: String!) {
  portfolios(ownerAddresses: [$ownerAddress]) {
    id
    nftBalances {
      id
      ownedAsset {
        id
        collection {
          id
          collectionId
          description
          image {
            id
            url
          }
          isVerified
          name
          numAssets
          markets(currencies: [USD]) {
            id
            floorPrice {
              id
              value
            }
            owners
            volume24h {
              id
              value
            }
            totalVolume {
              id
              value
            }
          }
        }
        description
        image {
          id
          url
        }
        name
        nftContract {
          id
          address
          chain
          standard
        }
        thumbnail {
          id
          url
        }
        tokenId
        creator {
          id
          address
          username
        }
      }
    }
  }
}

query NFTItemScreen($contractAddress: String!, $filter: NftAssetsFilterInput) {
  nftAssets(address: $contractAddress, filter: $filter) {
    edges {
      node {
        id
        collection {
          id
          collectionId
          description
          image {
            id
            url
          }
          isVerified
          name
          numAssets
          markets(currencies: [USD]) {
            id
            floorPrice {
              id
              value
            }
            owners
            totalVolume {
              id
              value
            }
          }
          nftContracts {
            id
            address
          }
        }
        description
        image {
          id
          url
        }
        name
        nftContract {
          id
          address
          chain
          standard
        }
        tokenId
        creator {
          id
          address
          username
        }
      }
    }
  }
}

query NftCollectionScreen(
  $contractAddress: String!
  $first: Int
  $after: String
) {
  nftCollections(filter: { addresses: [$contractAddress] }) {
    edges {
      node {
        id
        bannerImage {
          id
          url
        }
        isVerified
        numAssets
        description
        homepageUrl
        twitterName

        image {
          id
          url
        }
        name
        markets(currencies: [USD]) {
          id
          floorPrice {
            id
            value
          }
          owners
          volume24h {
            id
            value
          }
          totalVolume {
            id
            value
          }
        }
      }
    }
  }
  nftAssets(address: $contractAddress, first: $first, after: $after) {
    edges {
      node {
        ownerAddress
        id
        name
        tokenId
        nftContract {
          id
          address
        }
        collection {
          id
          collectionId
          name
        }
        image {
          id
          url
          dimensions {
            id
            width
            height
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}

query NftsTab($ownerAddress: String!, $first: Int, $after: String) {
  nftBalances(ownerAddress: $ownerAddress, first: $first, after: $after) {
    edges {
      node {
        ownedAsset {
          id
          collection {
            id
            name
            isVerified
            markets(currencies: [ETH]) {
              id
              floorPrice {
                value
              }
            }
          }
          image {
            id
            url
            dimensions {
              id
              width
              height
            }
          }
          name
          tokenId
          description
          nftContract {
            id
            address
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}

query PortfolioBalances($ownerAddress: String!) {
  portfolios(ownerAddresses: [$ownerAddress]) {
    id
    tokenBalances {
      id
      quantity
      denominatedValue {
        id
        currency
        value
      }
      token {
        id
        chain
        address
        name
        symbol
        decimals
        project {
          id
          logoUrl
          safetyLevel
          isSpam
        }
      }
      tokenProjectMarket {
        relativeChange24: pricePercentChange(duration: DAY) {
          id
          value
        }
      }
    }
  }
}

query SelectWalletScreen($ownerAddresses: [String!]!) {
  portfolios(ownerAddresses: $ownerAddresses) {
    id
    ownerAddress
    tokensTotalDenominatedValue {
      id
      value
    }
  }
}

query TransactionHistoryUpdater($addresses: [String!]!) {
  portfolios(ownerAddresses: $addresses) {
    id
    ownerAddress
    assetActivities(pageSize: 1, page: 1) {
      id
      timestamp
      transaction {
        id
        hash
      }
    }
  }
}

query Token($chain: Chain!, $address: String) {
  token(chain: $chain, address: $address) {
    id
    name
    symbol
    decimals
    chain
    address
    project {
      id
      logoUrl
      safetyLevel
      isSpam
    }
  }
}

query TokenDetailsScreen($chain: Chain!, $address: String) {
  token(chain: $chain, address: $address) {
    id
    address
    chain
    name
    symbol
    market(currency: USD) {
      id
      volume(duration: DAY) {
        id
        value
      }
    }
    project {
      id
      description
      homepageUrl
      twitterName
      safetyLevel
      logoUrl
      markets(currencies: [USD]) {
        id
        price {
          id
          value
        }
        marketCap {
          id
          value
        }
        fullyDilutedMarketCap {
          id
          value
        }
        priceHigh52W: priceHighLow(duration: YEAR, highLow: HIGH) {
          id
          value
        }
        priceLow52W: priceHighLow(duration: YEAR, highLow: LOW) {
          id
          value
        }
      }
      tokens {
        id
        chain
        address
      }
    }
  }
}

query TokenProjects($contracts: [ContractInput!]!) {
  tokenProjects(contracts: $contracts) {
    id
    logoUrl
    safetyLevel
    tokens {
      id
      chain
      address
      name
      decimals
      symbol
    }
  }
}

query TransactionList($address: String!) {
  portfolios(ownerAddresses: [$address]) {
    id
    assetActivities(pageSize: 50, page: 1) {
      id
      timestamp
      type
      transaction {
        id
        hash
        status
        to
        from
      }
      assetChanges {
        __typename
        ... on TokenTransfer {
          id
          asset {
            id
            name
            symbol
            address
            decimals
            chain
            project {
              id
              isSpam
            }
          }
          tokenStandard
          quantity
          sender
          recipient
          direction
          transactedValue {
            id
            currency
            value
          }
        }
        ... on NftTransfer {
          id
          asset {
            id
            name
            nftContract {
              id
              chain
              address
            }
            tokenId
            image {
              id
              url
            }
            collection {
              id
              name
            }
          }
          nftStandard
          sender
          recipient
          direction
        }
        ... on TokenApproval {
          id
          asset {
            id
            name
            symbol
            decimals
            address
            chain
          }
          tokenStandard
          approvedAddress
          quantity
        }
      }
    }
  }
}

query TopTokens(
  $chain: Chain
  $page: Int = 1
  $pageSize: Int = 100
  $orderBy: TokenSortableField = POPULARITY
) {
  topTokens(
    chain: $chain
    page: $page
    pageSize: $pageSize
    orderBy: $orderBy
  ) {
    id
    address
    chain
    decimals
    name
    symbol
    project {
      id
      isSpam
      logoUrl
      safetyLevel
    }
  }
}

query SearchTokens($searchQuery: String!) {
  searchTokens(searchQuery: $searchQuery) {
    id
    chain
    address
    decimals
    name
    symbol
    project {
      id
      logoUrl
      safetyLevel
    }
  }
}

query ExploreSearchTokens($searchQuery: String!) {
  searchTokens(searchQuery: $searchQuery) {
    id
    chain
    address
    decimals
    name
    symbol
    # Use 1Y volume to determine which token to show when results include the same token on multiple chains
    market {
      volume(duration: YEAR) {
        id
        value
      }
    }
    project {
      id
      logoUrl
      safetyLevel
    }
  }
}

query SpotPrices($contracts: [ContractInput!]!) {
  tokenProjects(contracts: $contracts) {
    id
    markets(currencies: [USD]) {
      id
      price {
        id
        value
      }
      pricePercentChange24h {
        id
        value
      }
    }
  }
}

fragment TopTokenParts on Token {
  id
  name
  symbol
  chain
  address
  market {
    id
    totalValueLocked {
      id
      value
    }
    volume(duration: DAY) {
      id
      value
    }
  }
  project {
    id
    logoUrl
    markets(currencies: [USD]) {
      id
      price {
        id
        value
      }
      pricePercentChange24h {
        id
        value
      }
      marketCap {
        id
        value
      }
    }
  }
}

query ExploreTokensTab($topTokensOrderBy: TokenSortableField!) {
  topTokens(
    chain: ETHEREUM
    page: 1
    pageSize: 100
    orderBy: $topTokensOrderBy
  ) {
    ...TopTokenParts
  }
  # `topTokens` returns WETH rather than ETH
  # here we retrieve ETH information to swap out in the UI
  eth: token(address: null, chain: ETHEREUM) {
    ...TopTokenParts
  }
}

query FavoriteTokenCard($chain: Chain!, $address: String) {
  token(chain: $chain, address: $address) {
    id
    name
    symbol
    chain
    address
    project {
      id
      logoUrl
      markets(currencies: [USD]) {
        id
        price {
          id
          value
        }
        pricePercentChange24h {
          id
          value
        }
      }
    }
  }
}
